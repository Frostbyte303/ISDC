import math
from math import sqrt
import numbers

def zeroes(height, width):
        """
        Creates a matrix of zeroes.
        """
        g = [[0.0 for _ in range(width)] for __ in range(height)] #0.0.for float
        return Matrix(g)   #to return grid of 0's

def identity(n):
        """
        Creates a n x n identity matrix.
        """
        I = zeroes(n, n)
        for i in range(n):
            I.g[i][i] = 1.0
        return I

class Matrix(object):

    # Constructor
    def __init__(self, grid):   #here is where the classes are defined
        self.g = grid
        self.h = len(grid)
        self.w = len(grid[0])

    #
    # Primary matrix math methods
    #############################
 
    def determinant(self):
        """
        Calculates the determinant of a 1x1 or 2x2 matrix.
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate determinant of non-square matrix.")
        if self.h > 2:
            raise(NotImplementedError, "Calculating determinant not implemented for matrices largerer than 2x2.")
        
        # TODO - your code here
        if len(self[0]) == 1:    #self.h ==1
            selfDeterminant = self  #.g[0][0] , self calls the entire 1x1 array0
        else:
            print ('This is self determinant')
            selfDeterminant = (self[0][0]*self[1][1] - self[0][1]*self[1][0]) 
            # why self not self.g[][], becasue calling potisiton in array
        print(selfDeterminant, 'determinant')    
        return selfDeterminant
    
    def trace(self):
        """
        Calculates the trace of a matrix (sum of diagonal entries).
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate the trace of a non-square matrix.")

        # TODO - your code here
        if (self[0]) == 1:  #why don't we use if len(self.h) == 1: 
            self = self
            return self
        else:
            selfTrace = (self[0][0]*self[1][1] - self[0][1]*self[1][0])
        print ('This is selfTrace working')
        return selfTrace

    def inverse(self):
        """
        Calculates the inverse of a 1x1 or 2x2 Matrix.
        """
        if not self.is_square():
            raise(ValueError, "Non-square Matrix does not have an inverse.")
        if self.h > 2:
            raise(NotImplementedError, "inversion not implemented for matrices larger than 2x2.")
           
        # TODO - your code here

        if self.w == 1:   
            return Matrix(1/self.g[0][0])
        
        if self.w == 2:
            inverT = zeroes(self.w, self.h)
            inverT[0][0] = self.g[1][1] * (1/self.determinant())
            inverT[0][1] = -self.g[0][1] * (1/self.determinant())
            inverT[1][0] = -self.g[1][0] * (1/self.determinant())
            inverT[1][1] = self.g[0][0] * (1/self.determinant())
                   
            #selfInvert = ((1/selfDeterminant)((selfTrace)(I))- self)
        return inverT
    
    def T(self):
        """
        Returns a transposed copy of this Matrix.
        """
        # TODO - your code here
        if self.w == 1:
            selfT = self
        else:
            selfT = self[0][0],self[1][0],self[0][1],self[1][1]
        return selfT
    
    def is_square(self):
        return self.h == self.w

    #
    # Begin Operator Overloading
    ############################
    def __getitem__(self,idx):
        """
        Defines the behavior of using square brackets [] on instances
        of this class.

        Example:

        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > my_matrix[0]
          [1, 2]

        > my_matrix[0][0]
          1
        """
        return self.g[idx]

    def __repr__(self):
        """
        Defines the behavior of calling print on an instance of this class.
        """
        s = ""
        for row in self.g:
            s += " ".join(["{} ".format(x) for x in row])
            s += "\n"
        return s

    def __add__(self,other):
        """
        Defines the behavior of the + operator
        """
        if self.h != other.h or self.w != other.w:
            raise(ValueError, "Matrices can only be added if the dimensions are the same") 
        #   
        # TODO - your code here
        #
       
        grid = []
        print (self, grid, 'beginningof add')
        for i in range(self.h):
            row = []
            for j in range(self.w):
                row.append(self[i][j] + other[i][j])
            grid.append(row)
        print ('add works, returning grid', grid)
        return Matrix(grid)     #using grid returns [[][]], not list of values
        
        
        
        #selfAdd = [[0 for row in range(self.w)] for col in range(self.h)]
        #for i in range(self.h):
            #row = []
         #   for j in range(self.w):
                #row.append
          #      selfAdd[i][j] = ([self[i][j] + other[i][j]])
                #selfAdd.append(row)
       
       # return selfAdd
        #print ('selfAdd finish')
        
    def __neg__(self):
        """
        Defines the behavior of - operator (NOT subtraction)

        Example:

        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > negative  = -my_matrix
        > print(negative)
          -1.0  -2.0
          -3.0  -4.0
        """
        #   
        # TODO - your code here
        #self = [[0 for i in range(self.w)] for j in range(self.h)]
        print (self, 'beg if neg')
        #for i in range(self.h):
         #   for j in range(self.w):
          #      self[i][j] *= -1
        #print (self)
        #type(self.h)
        #print ('negative working', self)
        #return Matrix(self)
        self = [[-ele for ele in item] for item in self]
        return Matrix(self)
             
            
    def __sub__(self, other):
        """
        Defines the behavior of - operator (as subtraction)
        """
        # TODO - your code here
        #
        #selfSub= [[0 for row in range(self.h)] for col in range(self.w)]
        #selfSub = [[0]* self.h for i in range (self.w)] # is this calling zeros?
        #selfSub = [[0 for row in range(self.w)] for col in range(self.h)]

        #for i in range(self.h):
          #  for j in range(self.w):
         #       selfSub[i][j] = ([self[i][j] + other[i][j]])
        #print ('sub working')                
        #return Matrix(selfSub)
        
        grid = []
        print (self, grid, 'beginningof sub')
        for i in range(self.h):
            row = []
            for j in range(self.w):
                row.append(self[i][j] - other[i][j])
            grid.append(row)
        print ('sub works, returning grid', grid)
        return Matrix(grid)
    
    
    def __mul__(self, other):
        """
        Defines the behavior of * operator (matrix multiplication)
        """
        #   
        # TODO - your code here
        #
        # Matrix = sum([i*j for (i, j) in zip(self, other)])
        print (self, 'this is self mul')
        print (other, 'this is other mul')
        #call zeros?
        res = zeroes(self.h, other.w) #[[0]* self.h for i in range (self.w)]
        for row in range(res.h):
            for col in range(res.w):
                res[row][col] = sum(self[row][k]* other[k][col] for k in range(self.w))
        
        return res
              
        
        #mult = sum( [self[i][0]*other[i] for i in range(other)])
        #return 
    
    def __rmul__(self, other):
        """
        Called when the thing on the left of the * is not a matrix.

        Example:

        > identity = Matrix([ [1,0], [0,1] ])
        > doubled  = 2 * identity
        > print(doubled)
          2.0  0.0
          0.0  2.0
        """
        if isinstance(other, numbers.Number):
            pass
            #   
            # TODO - your code here
            #
        #selfRmul= [[0 for row in range(self.h)] for col in range(self.w)]
        grid = []
        for i in range(self.h):
            row = []
            for j in range(self.w):
                rMul = self[i][j] * other
                row.append(rMul)
            grid.append(row)
            #selfRmul[i][j] = (self.g[i][j] * (other.g))                     
                #self[i][j] *= other
        print ('rmul working')
        return Matrix(grid)
